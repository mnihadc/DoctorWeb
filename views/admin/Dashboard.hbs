<div class="dashboard">
    <div class="container">
        <div class="search-container">
            <input type="text" placeholder="Search users..." oninput="filterUsers()" id="searchInput">
            <button onclick="togglePopup()" style="color: aliceblue;">Create User</button>
        </div>

        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                {{#each users}}
                <tr id="user-{{this._id}}" data-username="{{this.username}}" data-email="{{this.email}}">
                    <td>{{this._id}}</td>
                    <td>{{this.username}}</td>
                    <td>{{this.email}}</td>
                    <td><button onclick="openEditPopup('{{this._id}}', '{{this.username}}', '{{this.email}}')">Edit</button></td>
                    <td><button onclick="deleteUser('{{this._id}}')">Delete</button></td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>

    <div class="sidebar">
        <h2>Waiting for Call</h2>
        {{#each waitingUsers}}
        <div class="user-entry">
            <p>{{this.username}}</p>
            <button onclick="connectUser('{{this._id}}')">Connect</button>
        </div>
        {{else}}
        <p>No users waiting for a call</p>
        {{/each}}
    </div>
</div>

<div id="overlay" class="overlay"></div>

<div id="popup" class="popup">
    <h2 id="popupTitle" style="color: aliceblue;">Create User</h2>
    <input type="text" id="usernameInput" placeholder="Username">
    <input type="email" id="emailInput" placeholder="Email">
    <input type="password" id="passwordInput" placeholder="Password">
    <button onclick="addOrUpdateUser()">Save</button>
    <button onclick="togglePopup()">Cancel</button>
</div>

<script>
    let editingUserId = null;

    function filterUsers() {
        const searchTerm = document.getElementById("searchInput").value.toLowerCase();
        document.querySelectorAll("#userTableBody tr").forEach(row => {
            const username = row.dataset.username.toLowerCase();
            const email = row.dataset.email.toLowerCase();
            row.style.display = (username.includes(searchTerm) || email.includes(searchTerm)) ? "" : "none";
        });
    }

    function togglePopup() {
        const popup = document.getElementById("popup");
        const overlay = document.getElementById("overlay");
        popup.style.display = popup.style.display === "block" ? "none" : "block";
        overlay.style.display = overlay.style.display === "block" ? "none" : "block";
        if (popup.style.display === "none") resetPopup();
    }

    function resetPopup() {
        document.getElementById("usernameInput").value = '';
        document.getElementById("emailInput").value = '';
        document.getElementById("passwordInput").style.display = "block";
        document.getElementById("popupTitle").textContent = "Create User";
        editingUserId = null;
    }

    function openEditPopup(id, username, email) {
        document.getElementById("usernameInput").value = username;
        document.getElementById("emailInput").value = email;
        document.getElementById("passwordInput").style.display = "none";
        document.getElementById("popupTitle").textContent = "Update User";
        editingUserId = id;
        togglePopup();
    }

    async function addOrUpdateUser() {
        const userData = {
            username: document.getElementById("usernameInput").value,
            email: document.getElementById("emailInput").value,
            password: document.getElementById("passwordInput").value,
        };

        const url = editingUserId ? `/admin/update-user/${editingUserId}` : `/admin/create-user`;
        const method = editingUserId ? 'PUT' : 'POST';
        const response = await fetch(url, {
            method,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(userData)
        });

        if (response.ok) {
            alert(editingUserId ? "User updated!" : "User added!");
            location.reload();
        } else {
            const error = await response.json();
            alert(`Error: ${error.message || "Unknown error"}`);
        }
        togglePopup();
    }

    async function deleteUser(id) {
        if (confirm("Are you sure you want to delete this user?")) {
            await fetch(`/admin/delete-user/${id}`, { method: 'DELETE' });
            document.getElementById(`user-${id}`).remove();
            alert("User deleted!");
        }
    }

    function connectUser(userId) {
        // Redirect admin to the specific user's video call page
        window.location.href = `/doctor/video-call/${userId}`;
    }
</script>
